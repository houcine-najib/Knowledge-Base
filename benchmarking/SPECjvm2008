The general form of the command line to run the benchmark is

java [<jvm options>] -jar SPECjvm2008.jar [<SPECjvm2008 options>] [<benchmark name> ...]

java -jar SPECjvm2008.jar -base -ikv

java -Xms2G -Xmx2G -XX:+UnlockCommercialFeatures -XX:+FlightRecorder -jar SPECjvm2008.jar -ikv -ict -i 100 startup.helloworld

  -h,   --help                   Show this help.
        --version                Print version and exit.
  -sv,  --showversion            Print version and continue.
        --base                   Run the base compliant run of SPECjvm2008
                                 (default, unless jvm args are specified)
        --peak                   Run the peak compliant run of SPECjvm2008
        --lagom                  Run the Lagom benchmark suite, a version
                                 of SPECjvm2008 that uses a fixed workload.
  -pf,  --propfile <string>      Use this properties file.
  -i,   --iterations <int>       How many iterations to run.
                                 'inf' means an infinite number.
  -mi,  --miniter <int>          Minimum number of iterations.
  -ma,  --maxiter <int>          Maximum number of iterations.
  -it,  --iterationTime <time>   How long one iteration should be.
                                 The time is specified as an integer,
                                 and assumed to be in seconds, or an integer
                                 with unit, for example 4m (4 minutes).
                                 Units available are ms, s, m and h.
                                 If iteration time is too short, based on the
                                 warmup result, it will be adjusted to handle
                                 at least 5 operations.
  -fit, --forceIterationTime <time> As iteration time, but not adjusting time.
  -wt,  --warmuptime <time>      How long warmup should be.
                                 Time format is the same as in iteration time.
  -ops, --operations <int>       Hom many operations each iteration will
                                 consist of. It will then be a fixed workload
                                 and iteration time is ignored.
  -bt,  --benchmarkThreads <int> How many benchmark threads to use.
  -ja,  --jvmArgs "options"      JVM arguments used for startup subtests.
  -jl,  --jvmLauncher "path"     JVM launcher used for startup subtests.
  -r,   --reporter <file name>   Invokes the reporter with given file(s).
                                 The benchmarks will not be run.
  -v,   --verbose                Print verbose info.
  -pja, --parseJvmArgs           Parse jvm arguments info for command line,
                                 including heap settings (uses JMXBean info).
  -coe, --contintueOnError       Continue to run suite, even if one test fails.
  -ict, --ignoreCheckTest        Do not run check benchmark.
  -ikv, --ignoreKitValidation    Do not run checksum validition of
                                 benchmark kit.
  -crf, --createRawFile <bool>   Whether to generate a raw file.
  -ctf, --createTextFile <bool>  Whether to generate text report.
  -chf, --createHtmlFile <bool>  Whether to generate html report.
                                 If raw is disabled, so is text and html.
  -xd,  --xmlDir "path"          To set path to xml input files
  <benchmark>                    Name of benchmark(s) to run. Benchmarks
                                 with sub-benchmarks is also possible to
                                 specify. By default all submission
                                 benchmarks will be selected.

Benchmarks: 
Compiler  Group : 
Compress  Group :
Crypto    Group :
Derby     Group :
Mpegaudio Group :
Scimark   Group :
Serial    Group :
Sunflow   Group :
XML       Group :

1-startup.helloworld 
2-startup.compiler.compiler 
3-startup.compiler.sunflow 
4-startup.compress 
5-startup.crypto.aes 
6-startup.crypto.rsa 
7-startup.crypto.signverify 
8-startup.mpegaudio 
9-startup.scimark.fft 
10-startup.scimark.lu 
11-startup.scimark.monte_carlo 
12-startup.scimark.sor 
13-startup.scimark.sparse 
14-startup.serial 
15-startup.sunflow 
16-startup.xml.transform 
17-startup.xml.validation 
18-compiler.compiler 
19-compiler.sunflow 
20-compress 
21-crypto.aes 
22-crypto.rsa 
23-crypto.signverify 
24-derby 
25-mpegaudio 
26-scimark.fft.large 
27-scimark.lu.large 
28-scimark.sor.large 
29-scimark.sparse.large 
30-scimark.fft.small 
31-scimark.lu.small 
32-scimark.sor.small 
33-scimark.sparse.small 
34-scimark.monte_carlo 
35-serial 
36-sunflow
37-xml.transform
38-xml.validation
