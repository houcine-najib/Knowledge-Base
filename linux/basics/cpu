I- Introdcution
#
Although Linux does not interact directly with the CPU, but does through kernel scheduler there is some informatin and setting exposedto user-land.   

Note: All setting are not applicable on Virtual Machine (VM) CPU, also some information may show as "Unknown".
      In order to check use : dmidecode -s system-product-name
                              dmidecode -s system-manufacturer
      One output should clearly indicate if your runing inside a virtual or pyhiscal system.

II- Hardware
#
CPU General Info :

lscpu         : Max Freq; Min Freq; L1i,L1d,L2,L3 cache; Flags(*)  
x86info       : 
/proc/cpuinfo : file
cpupower      : cpupower -c all frequency-info
                cpupower -c all frequency-info --freq     = Current Frequency ( CPUFreq)
                                               --hwlimits = CPU Hardware Limits

# (*) Flags are CPU features,example 1GB page support (HugePage) 
# Also the sysfs file system expose some information and setting in : /sys/bus/cpu/devices/cpu{0..n} 

x86info -c : CPU Cache Informations    
#
L1-i (instruction cache)
L1-d (data cache)
TLB (Translation Lookaside Buffer)
L2  
L3 
#
getconf -a 
#
CPU Performance Counters:
#
CPU cycles
CPU instructions
L1,L2,L3 cache accesses: hits, misses

Refer to : perf,valgrind,oprofile,turbostat             

III- CPU Frequency Policy :Governer 
# Documenation on CPU governers in /usr/share/doc/kernel-doc-<version>/Documenation/cpu-freq/governors.txt

CPU Governer set cpu-freq policy based on frequency limits : scaling_max_freq
                                                             scaling_min_freq 

These limits(default lspcu values) ,available as files in /sys/bus/cpu/devices/cpu#/cpufreq/ 
These files are  writable by echoing allowing CPU OC(OverClocking BIOS).
#
Available governers can be listed in scaling_available_governors file :
  
  powersave   = lowest  frequency within  scaling_min_freq and scaling_max_freq
  performance = highest frequency within  scaling_min_freq and scaling_max_freq
  userspace   = set     If supported (*)  frequency at         scaling_setspeed
  ondemand 
  conservative 

# List available CPU governers
cpupower frequency-info --governors

CPU Kernel Drivers don't support all governers (E.g:intel_pstate) to view current driver: 
# List Kernel CPU driver
cpupower frequency-info --driver
#
Intel P-State default driver  can be disabled by kernel commandline : intel_pstate=disable (ACPI-CPUFreq Driver)
# Documenation on Intel P-State driver in /usr/share/doc/kernel-doc-<version>/Documenation/cpu-freq/intel-pstate.txt
/sys/devices/system/cpu/intel_pstate/ : max_perf_pct =
                                        min_perf_pct =
                                        no_turbo     = 
# Setting CPU Governer 
cpupower -c <cpu_list> frequency-set --governor <gov>

echo <gov>  > /sys/bus/cpu/devices/cpu#/cpufreq/scaling_governor

# Setting Min and Max CPU Frequency in Khz
cpupower -c <cpu_list> frequency-set --max <max_freq_Khz> --min <min_freq_Khz>

echo <max_freq_Khz>  > /sys/devices/system/cpu/cpu#/cpufreq/scaling_max_freq
echo <min_freq_Khz>  > /sys/devices/system/cpu/cpu#/cpufreq/scaling_min_freq

# Setting CPU Frequency
cpupower -c <cpu_list> frequency-set --freq <freq_Khz>

echo <freq_Khz>  > /sys/devices/system/cpu/cpu#/cpufreq/scaling_setspeed

# Managing CPU Power Policy
x86_energy_perf_policy Energy Perf Bias tool which set energy policy for cpu 

x86_energy_perf_policy  -c [cpu] -v 'performance/normal/powersave'
x86_energy_perf_policy  -c [cpu] -v  n [0-15] ( 0: max perfomance ;15:max energy efficiency)

cpupower set --cpu <cpu_list> --perf-bias [0-15] ( 0: max perfomance ;15:max energy efficiency)


IV- IRQ (Interrupt Request)

hardware interrupt : CPU receives an interrupt by hardware devices : hardware interrupt 
software interrupt : called by running process for I/O or by kernel scheduler (kernel timer interrupt) : Kernel Tick 

Kernel Tick: cause kernel interfere (interrupt/context switch) with real-time process also waking up idle CPU. 1000 ticks/s

To reduce tick interrupt on idle CPUs : set kernel parameter nohz=on
To disbale kernel tick interrupt on specified CPUs : 
Set kerenl bootloader commandline : nohz_full=CPU list (/sys/devices/system/cpu/nohz_full) 1 tick/s

/proc/interrupts : can be examined to show which interrupts refered by thier number  are firing on which CPUs.

Other system tools can show interrupts statistics.
Interrupts cause context switching.

V- IRQ Affinity:

To improve application performance assign interrupt affinity and process affinity to the same processor/core,interrupt and applicationthreads to share cache lines. Avoid remote processor handling irq while application on local node.

E.g: To get the best performance from HAProxy, it is important to pin HAProxy and network interrupts on the same physical CPU, but on different cores. This way, they can benefit from the maximum CPU cycles and share the CPU L3 memory.

/proc/irq/<irq_number>/smp_affinity      : CPU bitmask on which the kernel will execute irq handler.
/proc/irq/<irq_number>/smp_affinity_list : List of CPU on which kernel irq handler allowed to run (, or - for range) 
smp_affinity bitmask:

On system with more than 32 CPUs , delimite each 32 bit group by comma e.g.: ffffffff,ffffffff refer to ALL CPUs of 64 CPUs
                                                                             ffffffff,00000000 refer to 32-Last  CPUs of 64 CPUs

Bitmask Calculation :
HEX { 2^(CPU_Aff_1) + 2^(CPU_Aff_2) ...... + 2^(CPU_Aff_N) }  where CPU_Aff_# : is CPU number to set IRQ affinity to 
E.g: In order to set CPU affinity of IRQ number 7 to CPUs 0 and 3 : printf '%8x' $[2**0 + 2**3] > /proc/irq/7/smp_affinity 

IRQ-Balance System Daemon :distributes hardware interrupts across processors every 10s (enabled by default)
/etc/sysconfig/irqbalance : IRQBALANCE_ONESHOT= yes : on startup wait 1 min balance irqs and exit
                            IRQBALANCE_BANNED_CPUS= : bitmask of CPUs ignored by daemon (E.g:ff000000,00000001 CPU 0,56-63)

Stop and Disable irqbalance service to set irq affinity

systemctl stop irqbalance.service
systemctl disable irqbalance.service

VI- CPU Affinity:

Pining process to cpu or cpu affinity of process.

taskset -c <comma,spearte-dash range cpu> -- <command> 
taskset -c <comma,spearte-dash range cpu> -- <pid>

Notes: taskset is not NUMA-aware.
       systemd cpu affinity is preferred on taskset.

CPU Affinity for  kernel threads
 
write-back bdi-flush :  /sys/bus/workqueue/devices/writeback/cpumask

watchdog             : /proc/sys/kernel/watchdog_cpumask

RCU : 
Kernel  parameters
rcu_nocbs=cpulist to allow the user to move all RCU offload threads to a housekeeping CPU.
rcu_nocb_poll to relieve each CPU from the responsibility awakening their RCU offload threads.
Tuna
tuna -t rcu* -c <cpu_number> -m
Taskset
for i in `pgrep rcu[^c]` ; do taskset -pc <cpu_number> $i ; done

VII- CPU Isolation

To isolate cpus from scheduler use 

kernel commandline: isolcpus= <comma,spearte-dash range cpu>
or tuna (not the same behaviour) 













