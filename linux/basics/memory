I- Hardware

Memory Zones (for 64-bit processors)
DMA    (first 16MB of memory 24-bit I/O)
DMA32  (16MB to 4GB 32-bit I/O)
Normal (4GB to end of RAM...)


II- Memory Fragmentation and Compaction

/proc/buddyinfo expose fragmenetation (simplified output)

               Order             0       1      2      3      4      5      6      7      8      9     10 
               Zone 4k Pages     1       2      4      8     16     32     64    128    256    512   1024
               Zone Byte Size  4kB     8kB   16kB   32kB   64kB  128kB  256kB  512kB 1024kB 2048kB 4096kB
                        |                                                                                |   
Node         Zone name  |                                                                                |
------------------------+--------------------------------------------------------------------------------+
Node 0, zone      DMA   |       3       2      2      2      2      1      0      0      1      1      3 |
Node 0, zone    DMA32   |    8774    4785   2383   1472   1102    840    606    377    190    139     19 |
Node 0, zone   Normal   |  147104  336891 113434 136648  72075  29349   9539   3304   1481    727      0 |
Node 1, zone   Normal   | 1211026 1381111 482960  82119   7636    924    186     83    283      1      0 |

/proc/pagetypeinfo file classify these pages by type (Unmovable,Reclaimable,Movable,Reserve,Isolate)

Compaction
All zones can be compacted such that free memory is available in contiguous blocks where possible by:

echo 1 > /proc/sys/vm/compact_memory 

III- HugePages and Transparent Huge Pages (THP)

1- HugePages
/proc/meminfo 

PageTables:       1244880 kB
HugePages_Total:      0
HugePages_Free:       0
HugePages_Rsvd:       0
HugePages_Surp:       0
Hugepagesize:       2048 kB

HugePages_Total: Number of hugepages : sysctl vm.nr_hugepages= or /proc/sys/vm/nr_hugepages .
HugePages_Rsvd : Number of hugepages committed to be allocated by application but no allocation has yet been made.
                 (Guarantee that an application will be able to allocate a huge page at fault time)
HugePages_Surp : Number of hugepages surplus above vm.nr_hugepages : /proc/sys/vm/nr_overcommit_hugepages.
HugePages_Used = HugePages_Total - HugePages_Free 

Note: Itâ€™s recommended to restart the system after configuring hugepages as the chances of having free contiguous memory 
      (for hugepages allocation) is much greater when a system is started

2- THP
Enable/Disable at Runtime  /sys/kernel/mm/transparent_hugepage/enabled
 always  : enabled 
 madvise : disable hugepages system-wide only in madvise regions
 never   : disabled 

Disable at boot
Kernel commandline : transparent_hugepage=never|always|madvise

Defragmentation /sys/kernel/mm/transparent_hugepage/defrag
always  : enabled
madvise : defrag only in madvise regions
never   : disbaled regular pages served
Zero Huge Pages /sys/kernel/mm/transparent_hugepage/use_zero_page
0   : enable
1   : disable

khugepaged /sys/kernel/mm/transparent_hugepage/khugepaged 
Kernel thread occasionally attempt to substitute smaller pages being used currently with a hugepage allocation,
thus maximizing THP usage.

THP usage 
System-Wide :
/proc/meminfo label : AnonHugePages since file-based hugepages are not supported

Per Process :
grep -e AnonHugePages  /proc/*/smaps | awk  '{ if($2>4) print $0} ' |  awk -F "/"  '{print $0; system("ps -fp " $3)} '

IV- SWAP 
SWAP is disk space used in case of memory pressure to swap-out pages, it can be a paratition or a file
It's better to swap out a program that's been inactive for a while, and instead keep often-used files in cache (inactive memory).

swapon -s


V- Memory Over Coommitement
Linux provisions more memory (both RAM and Swap) than it has available. 

overcommitt parameters : sysctl vm.overcommit_memory : /proc/sys/vm/overcommit_memory
                         sysctl vm.overcommit_ratio  : /proc/sys/vm/overcommit_ratio

vm.overcommit_memory : 
0 = heuristic overcommit (1/3 ~ 3% of free reserved for root)
1 = always overcommit 
2 = strict overcommit limited by overcommit_ratio. ( CommitLimit in /proc/meminfo) (1/32 ~ 3% of real memory reseverd for root)

vm.overcommit_ratio:
Memory Allocation Limit = Swap + RAM * (Overcommit Ratio / 100)

Committed_AS in /proc/meminfo : committed address space,an estimate RAM needed to never have OOM.

Note: If overcommit_memory = 2 ,always check the overcommit_ratio in case of RAM add or SWAP remove.

Overcommit Ratio = 100 * ((RAM - Swap Space) / RAM)

VI- OOM

Out of Memory  killer is kicking in is purely based on the availability of free pages. 
This could be a page alloc failure from any memory zones

VII- Memory Reclamition
