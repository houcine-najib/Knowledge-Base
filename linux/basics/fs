I- Concepts                        
#
VFS           : virtual file system interface provides a common interface for different file system types.
Inode         : index node containi metadata for a file system object(permissions,timestamps, data pointers).
Extent        : an extent is a contiguous group of blocks.
Journaling    : writes journal logs in journal area before writing actual user data to the file system.
Copy-on-Write : file system does not overwrite existing blocks.
Scrubbing     : asynchronously reads all data blocks and verifies checksums
WriteBarriers : enforce proper on-disk ordering of journal commits, disk controller caches safe to use
Read-ahead    : pre-fetching data that is likely to be read and loading it into the page cache.

II- FS  Tuning 
#
1) VFS
# Documenation available in /usr/share/doc/kernel-doc-<version>/Documenation/sysctl/fs.txt and vm.txt
fs.file-max   (/proc/sys/fs/file-max)   = maximum number of file-handles the kernel will allocate.
fs.nr_open    (/proc/sys/fs/nr_open)    = maximum number of file-handles a process can allocate.
fs.aio-max-nr (/proc/sys/fs/aio-max-nr) = maximum number of asynchronous io requests system-wide.

vm.drop_caches (/proc/sys/vm/drop_caches) = 1 : free pagecache
                                          = 2 : free dentries and inodes
                                          = 3 : free pagecache, dentries and inodes

vm.vfs_cache_pressure (/proc/sys/vm/cache_pressure) = controls kernel directory and inode objects caching tendency.
                                                    = 100  : fair rate cache/reclaim
                                                    = <100 : perfer cache
                                                    = 0    : always cache
                                                    = >100 : perfer reclaim
2) XFS  
# Documenation available in /usr/share/doc/kernel-doc-<version>/Documenation/filesystems/xfs.txt
fs.xfs.xfssyncd_centisecs   (Min: 100 Default:3000 Max:720000) interval at which the xfssyncd thread flushes metadataout to disk.
fs.xfs.xfsbufd_centisecs    (Min: 50  Default:100  Max:3000)   interval at which xfsbufd scans the dirty metadata buffers list.
fs.xfs.age_buffer_centisecs (Min: 100 Default:1500 Max:720000) age at which xfsbufd flushes dirty metadata buffers to disk.

III- Format Options
# 
/proc/filesystems : all filesystems registered to the kernel ( nodev : without persistent storage device)
/proc/mounts      : list of all currently mounted filesystem (/proc/mtab).
/proc/fstab       : list of all mounts entries.
#
df      -aTh      : list all filesystems with type and usage Bytes (-i for inode usage).    
findmnt -a        : tree list all mounted filesytems or search for a filesystem.
lsblk   -af       : list all block devices and corresponding mount points.
#
1) Ext4
# Documenation available in /usr/share/doc/kernel-doc-<version>/Documenation/filesystems/ext4.txt
/sys/fs/ext4/<disk>

# Configurations in /etc/mke2fs.conf
mk2fs : -n = dry-run formatting paratition
        -N = specify inode size (Default 256)
        -b = block size : 1024,2048 or 4096
        -i = inode for every bytes-per-inode bytes 
        -I = inode size in bytes (Default 256)
        -E : stride       =stride-size RAID chunk-size / Block Size
             stripe_width =stripe-width (Number of disks * stride)
             discard :  discard blocks at mkfs (disbale nodiscard) 
        -J : size   = internel journal size in MB
             device = device of external journal (also label or uuid)
        -O : journal_dev <external-journal> : create externel journal. 
             <feature>                      : override filesystem default features (/etc/mke2fs.conf)
        -T : usage type (small,big ....)
tune2fs : can be used to adjust most of these parameters (may need to be unmounted)

Note: Number of disks in RAID is calculated : RAID 0  --> N
                                              RAID 1  --> N/2
                                              RAID 5  --> N-1
                                              RAID 10 --> N/2
Stride size = [RAID chunk size] / [Filesystem block size]
2) XFS
# Documenation available in /usr/share/doc/kernel-doc-<version>/Documenation/filesystems/xfs.txt
/sys/fs/xfs/<disk>
xfs_info <device>
xfs_io -x -c "resblks" <mnt> : get and/or set count of reserved filesystem blocks.
xfs_io -x -c "stat/statfs"   : get filesystem stats

mkfs.xfs : -b : size=<bytes> filesystem block size (min 512,default 4kB,max 64KB )
           -d : agcount= number of allocation groups (number of CPUs)
                agsize=<bytes> size of allocation group ( min 16 MB, max 1 TB)
                sunit  = stripe unit (or chunk-size) of RAID array in 512-byte block / su (chunk-size in bytes)
                swidth = stripe width of RAID array in 512-byte block (number of disks in raid * 512 )/ sw = number of disks in raid
           -i : size   = inode size in bytes (default 256 ,max 2048)
                maxpct = max % allocted to inode (default 25% <1TB, 5% <50TB,1% > 50TB)
           -l : internal = 1 internel log device,0 external log device
                logdev   = device for filesystem log
                size     = size of log in bytes(*b in blocks)
                sunit/su = same as for data
           -n : size= directory block size in bytes (for many small files : 64KB for >1,000,000 entries)
           
IV- Mount Options :
#
1) Generic Options

Defaults mount options are : rw, suid, dev, exec, auto, nouser, and async
Note: Filesystems has specific mount options. 
Example: for extended filesystem family defaults mount options can be listed by : tune2fs -l <paratition>

1) Ext4

noatime
This feature disables registering a file access time.

data=writeback
This feature allows metadata to be written asynchronously from the corresponding data.

barrier=0

2) XFS
mount -t xfs -o = allocsize=size
              Sets the buffered I/O end-of-file preallocation size when
              doing delayed allocation writeout. Valid values for this
              option are page size (typically 4KiB) through to 1GiB,
              inclusive, in power-of-2 increments.

              The default behavior is for dynamic end-of-file preallocation
              size, which uses a set of heuristics to optimise the
              preallocation size based on the current allocation patterns
              within the file and the access patterns to the file.
              Specifying a fixed allocsize value turns off the dynamic
              behavior.

       attr2|noattr2
              The options enable/disable an "opportunistic" improvement to
              be made in the way inline extended attributes are stored on-
              disk.  When the new form is used for the first time when attr2
              is selected (either when setting or removing extended
              attributes) the on-disk superblock feature bit field will be
              updated to reflect this format being in use.

              The default behavior is determined by the on-disk feature bit
              indicating that attr2 behavior is active. If either mount
              option it set, then that becomes the new default used by the
              filesystem.

              CRC enabled filesystems always use the attr2 format, and so
              will reject the noattr2 mount option if it is set.

       barrier|nobarrier
              Note: This option has been deprecated as of kernel v4.10; in
              that version, integrity operations are always performed and
              the mount option is ignored.  These mount options will be
              removed no earlier than kernel v4.15.

              Enables/disables the use of block layer write barriers for
              writes into the journal and for data integrity operations.
              This allows for drive level write caching to be enabled, for
              devices that support write barriers.

              Barriers are enabled by default.

       discard|nodiscard
              Enable/disable the issuing of commands to let the block device
              reclaim space freed by the filesystem.  This is useful for SSD
              devices, thinly provisioned LUNs and virtual machine images,
              but may have a performance impact.

              Note: It is currently recommended that you use the fstrim
              application to discard unused blocks rather than the discard
              mount option because the performance impact of this option is
              quite severe.  For this reason, nodiscard is the default.

       grpid|bsdgroups|nogrpid|sysvgroups
              These options define what group ID a newly created file gets.
              When grpid is set, it takes the group ID of the directory in
              which it is created; otherwise it takes the fsgid of the
              current process, unless the directory has the setgid bit set,
              in which case it takes the gid from the parent directory, and
              also gets the setgid bit set if it is a directory itself.

       filestreams
              Make the data allocator use the filestreams allocation mode
              across the entire filesystem rather than just on directories
              configured to use it.

       ikeep|noikeep
              When ikeep is specified, XFS does not delete empty inode
              clusters and keeps them around on disk.  When noikeep is
              specified, empty inode clusters are returned to the free space
              pool.  noikeep is the default.

       inode32|inode64
              When inode32 is specified, it indicates that XFS limits inode
              creation to locations which will not result in inode numbers
              with more than 32 bits of significance.

              When inode64 is specified, it indicates that XFS is allowed to
              create inodes at any location in the filesystem, including
              those which will result in inode numbers occupying more than
              32 bits of significance.

              inode32 is provided for backwards compatibility with older
              systems and applications, since 64 bits inode numbers might
              cause problems for some applications that cannot handle large
              inode numbers.  If applications are in use which do not handle
              inode numbers bigger than 32 bits, the inode32 option should
              be specified.

              For kernel v3.7 and later, inode64 is the default.

       largeio|nolargeio
              If "nolargeio" is specified, the optimal I/O reported in
              st_blksize by stat(2) will be as small as possible to allow
              user applications to avoid inefficient read/modify/write I/O.
              This is typically the page size of the machine, as this is the
              granularity of the page cache.

              If "largeio" specified, a filesystem that was created with a
              "swidth" specified will return the "swidth" value (in bytes)
              in st_blksize. If the filesystem does not have a "swidth"
              specified but does specify an "allocsize" then "allocsize" (in
              bytes) will be returned instead. Otherwise the behavior is the
              same as if "nolargeio" was specified.  nolargeio is the
              default.

       logbufs=value
              Set the number of in-memory log buffers.  Valid numbers range
              from 2–8 inclusive.

              The default value is 8 buffers.

              If the memory cost of 8 log buffers is too high on small
              systems, then it may be reduced at some cost to performance on
              metadata intensive workloads. The logbsize option below
              controls the size of each buffer and so is also relevant to
              this case.

       logbsize=value
              Set the size of each in-memory log buffer.  The size may be
              specified in bytes, or in kibibytes (KiB) with a "k" suffix.
              Valid sizes for version 1 and version 2 logs are 16384
              (value=16k) and 32768 (value=32k).  Valid sizes for version 2
              logs also include 65536 (value=64k), 131072 (value=128k) and
              262144 (value=256k). The logbsize must be an integer multiple
              of the log stripe unit configured at mkfs time.

              The default value for version 1 logs is 32768, while the
              default value for version 2 logs is MAX(32768, log_sunit).

       logdev=device and rtdev=device
              Use an external log (metadata journal) and/or real-time
              device.  An XFS filesystem has up to three parts: a data
              section, a log section, and a real-time section.  The real-
              time section is optional, and the log section can be separate
              from the data section or contained within it.

       noalign
              Data allocations will not be aligned at stripe unit
              boundaries. This is only relevant to filesystems created with
              non-zero data alignment parameters (sunit, swidth) by mkfs.

       norecovery
              The filesystem will be mounted without running log recovery.
              If the filesystem was not cleanly unmounted, it is likely to
              be inconsistent when mounted in "norecovery" mode.  Some files
              or directories may not be accessible because of this.
              Filesystems mounted "norecovery" must be mounted read-only or
              the mount will fail.

       nouuid Don't check for double mounted file systems using the file
              system uuid.  This is useful to mount LVM snapshot volumes,
              and often used in combination with "norecovery" for mounting
              read-only snapshots.

       noquota
              Forcibly turns off all quota accounting and enforcement within
              the filesystem.

       uquota/usrquota/quota/uqnoenforce/qnoenforce
              User disk quota accounting enabled, and limits (optionally)
              enforced.  Refer to xfs_quota(8) for further details.

       gquota/grpquota/gqnoenforce
              Group disk quota accounting enabled and limits (optionally)
              enforced.  Refer to xfs_quota(8) for further details.

       pquota/prjquota/pqnoenforce
              Project disk quota accounting enabled and limits (optionally)
              enforced.  Refer to xfs_quota(8) for further details.

       sunit=value and swidth=value
              Used to specify the stripe unit and width for a RAID device or
              a stripe volume.  "value" must be specified in 512-byte block
              units. These options are only relevant to filesystems that
              were created with non-zero data alignment parameters.

              The sunit and swidth parameters specified must be compatible
              with the existing filesystem alignment characteristics.  In
              general, that means the only valid changes to sunit are
              increasing it by a power-of-2 multiple. Valid swidth values
              are any integer multiple of a valid sunit value.

              Typically the only time these mount options are necessary if
              after an underlying RAID device has had it's geometry
              modified, such as adding a new disk to a RAID5 lun and
              reshaping it.

       swalloc
              Data allocations will be rounded up to stripe width boundaries
              when the current end of file is being extended and the file
              size is larger than the stripe width size.

       wsync  When specified, all filesystem namespace operations are
              executed synchronously. This ensures that when the namespace
              operation (create, unlink, etc) completes, the change to the
              namespace is on stable storage. This is useful in HA setups
              where failover must not result in clients seeing inconsistent
              namespace presentation during or after a failover event.

V- Fragmentation

1) Ext4
2) XFS

VI- Comparison of FS
 
                        EXT4             XFS        BTRFS

Indexing Algorithm      Hash B-tree      B+tree     Modified B-tree
Max volume size         1 Ebytes         8 Ebytes   16 Ebytes
Max file size           16 Tbytes        8 Ebytes   16 Ebytes
Max number of files     4 billion        2^64       2^64
Max file name size      255 bytes        255 bytes  255 bytes
Transparent compression No               No         Yes
Transparent encryption  Yes              No         Planned
Copy-on-Write (COW)     No               Planned    Yes
Snapshots               No               Planned    Yes

